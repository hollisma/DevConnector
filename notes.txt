
---------------------------------------------------------------------------------------------------
GENERAL

dependencies: 
  express: express
  express-validator: validation for express
  bcryptjs: password encryption
  config: global vars
  gravatar: profile avatars
  jsonwebtoken: validation tokens
  mongoose: interact with mongodb
  request: http requests to another api (using for github)
dev dependencies (installed with -D):
  nodemon: updates server so we don't have to constantly refresh
  concurrently: run server and client at same time

---------------------------------------------------------------------------------------------------
CLIENT

npx create-react-app client:
  npx lets us use create-react-app without installing it on our machine; 
  did not work for me; 
client dependencies: 
  axios: make HTTP requests
  react-router-dom: router
  redux
  react-redux
  redux-thunk: middleware to make asynchronous requests
  redux-devtools-extension
  moment: date and time library
  react-moment: use moment within component
  uuid: generate random IDs
add proxy to package.json to make using axios easier

---------------------------------------------------------------------------------------------------
REACT

use 'racf' to create boilerplate for functional component with react-snippets extension

---------------------------------------------------------------------------------------------------
REDUX

set up: 
  must create a store.js, which is basically boilerplate;
  wrap app.js component with a <Provider store={store}> to connect react with redux;
  also need an index.js to combine reducers;
intuition: 
  types are types of actions;
  actions are actions;
  action creaters create actions;
  reducers are named after the array.reduce method - they take actions and change the state;

---------------------------------------------------------------------------------------------------
TESTING

endpoints:
  use Postman to send different types of requests and information;
  can make collections to make testing easier;

---------------------------------------------------------------------------------------------------
HEROKU

create "production.json" in config folder and copy default.json;
in .gitignore, ignore config/default.json;
need to build out static assets. Can do npm run build to build a new index.html in static folder. 
^ An easier way is to build on server using a postbuild script. 
  in package.json, add "heroku-postbuild": "NPM_CONFIG_PRODUCTION=false npm install --prefix client && npm run build --prefix client"
in server.js, take out "API running" thing, import 'path' module, and under the api routes, add this:
  
  // Serve static assets in production
  if (process.env.NODE_ENV === 'production') {
    // Set static folder
    app.use(express.static('client/build'));

    app.get('*', (req, res) => {
      res.sendFile(path.resolve(__dirname, 'client', 'build', 'index.html'));
    });
  }
